/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface INFTKEYMarketPlaceV1Contract
  extends Truffle.Contract<INFTKEYMarketPlaceV1Instance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<INFTKEYMarketPlaceV1Instance>;
}

export interface TokenBidAccepted {
  name: "TokenBidAccepted";
  args: {
    tokenId: BN;
    fromAddress: string;
    toAddress: string;
    total: BN;
    value: BN;
    fees: BN;
    0: BN;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: BN;
  };
}

export interface TokenBidEntered {
  name: "TokenBidEntered";
  args: {
    tokenId: BN;
    fromAddress: string;
    value: BN;
    0: BN;
    1: string;
    2: BN;
  };
}

export interface TokenBidWithdrawn {
  name: "TokenBidWithdrawn";
  args: {
    tokenId: BN;
    fromAddress: string;
    value: BN;
    0: BN;
    1: string;
    2: BN;
  };
}

export interface TokenBought {
  name: "TokenBought";
  args: {
    tokenId: BN;
    fromAddress: string;
    toAddress: string;
    total: BN;
    value: BN;
    fees: BN;
    0: BN;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: BN;
  };
}

export interface TokenDelisted {
  name: "TokenDelisted";
  args: {
    tokenId: BN;
    fromAddress: string;
    0: BN;
    1: string;
  };
}

export interface TokenListed {
  name: "TokenListed";
  args: {
    tokenId: BN;
    fromAddress: string;
    minValue: BN;
    0: BN;
    1: string;
    2: BN;
  };
}

type AllEvents =
  | TokenBidAccepted
  | TokenBidEntered
  | TokenBidWithdrawn
  | TokenBought
  | TokenDelisted
  | TokenListed;

export interface INFTKEYMarketPlaceV1Instance extends Truffle.ContractInstance {
  /**
   * surface the erc721 token contract address
   */
  tokenAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * surface the erc20 payment token contract address
   */
  paymentTokenAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * get current listing of a token
   * @param tokenId erc721 token Id
   */
  getTokenListing(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    tokenId: BN;
    listingPrice: BN;
    seller: string;
    expireTimestamp: BN;
  }>;

  /**
   * get all current valid listings
   */
  getTokenListings(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    { tokenId: BN; listingPrice: BN; seller: string; expireTimestamp: BN }[]
  >;

  /**
   * get bidder's bid on a token
   * @param bidder address of a bidder
   * @param tokenId erc721 token Id
   */
  getBidderTokenBid(
    tokenId: number | BN | string,
    bidder: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    tokenId: BN;
    bidPrice: BN;
    bidder: string;
    expireTimestamp: BN;
  }>;

  /**
   * get all valid bids of a token
   * @param tokenId erc721 token Id
   */
  getTokenBids(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    { tokenId: BN; bidPrice: BN; bidder: string; expireTimestamp: BN }[]
  >;

  /**
   * get highest bid of a token
   * @param tokenId erc721 token Id
   */
  getTokenHighestBid(
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    tokenId: BN;
    bidPrice: BN;
    bidder: string;
    expireTimestamp: BN;
  }>;

  /**
   * get all highest bids
   */
  getAllTokenHighestBids(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    { tokenId: BN; bidPrice: BN; bidder: string; expireTimestamp: BN }[]
  >;

  /**
   * List token for sale
   * @param expireTimestamp when would this listing expire
   * @param tokenId erc721 token Id
   * @param value min price to sell the token
   */
  listToken: {
    (
      tokenId: number | BN | string,
      value: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenId: number | BN | string,
      value: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BN | string,
      value: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BN | string,
      value: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Delist token for sale
   * @param tokenId erc721 token Id
   */
  delistToken: {
    (
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Buy token
   * @param tokenId erc721 token Id
   */
  buyToken: {
    (
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Enter bid for token
   * @param bidPrice price in payment token
   * @param expireTimestamp when would this bid expire
   * @param tokenId erc721 token Id
   */
  enterBidForToken: {
    (
      tokenId: number | BN | string,
      bidPrice: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenId: number | BN | string,
      bidPrice: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BN | string,
      bidPrice: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BN | string,
      bidPrice: number | BN | string,
      expireTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Withdraw bid for token
   * @param tokenId erc721 token Id
   */
  withdrawBidForToken: {
    (
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Accept a bid of token from a bidder
   * @param bidder bidder address
   * @param tokenId erc721 token Id
   */
  acceptBidForToken: {
    (
      tokenId: number | BN | string,
      bidder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenId: number | BN | string,
      bidder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BN | string,
      bidder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BN | string,
      bidder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Count how many listing records are invalid now This is to help admin to decide to do a cleaning or not
   */
  getInvalidListingCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Count how many bids records are invalid now This is to help admin to decide to do a cleaning or not
   */
  getInvalidBidCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Clean all invalid listings
   */
  cleanAllInvalidListings: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Clean all invalid bids
   */
  cleanAllInvalidBids: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Show if listing and bid are enabled
   */
  isListingAndBidEnabled(
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Surface minimum listing and bid time range
   */
  actionTimeOutRangeMin(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Surface maximum listing and bid time range
   */
  actionTimeOutRangeMax(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Service fee
   */
  serviceFee(txDetails?: Truffle.TransactionDetails): Promise<{ 0: BN; 1: BN }>;

  methods: {
    /**
     * surface the erc721 token contract address
     */
    tokenAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * surface the erc20 payment token contract address
     */
    paymentTokenAddress(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * get current listing of a token
     * @param tokenId erc721 token Id
     */
    getTokenListing(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      tokenId: BN;
      listingPrice: BN;
      seller: string;
      expireTimestamp: BN;
    }>;

    /**
     * get all current valid listings
     */
    getTokenListings(
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      { tokenId: BN; listingPrice: BN; seller: string; expireTimestamp: BN }[]
    >;

    /**
     * get bidder's bid on a token
     * @param bidder address of a bidder
     * @param tokenId erc721 token Id
     */
    getBidderTokenBid(
      tokenId: number | BN | string,
      bidder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      tokenId: BN;
      bidPrice: BN;
      bidder: string;
      expireTimestamp: BN;
    }>;

    /**
     * get all valid bids of a token
     * @param tokenId erc721 token Id
     */
    getTokenBids(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      { tokenId: BN; bidPrice: BN; bidder: string; expireTimestamp: BN }[]
    >;

    /**
     * get highest bid of a token
     * @param tokenId erc721 token Id
     */
    getTokenHighestBid(
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      tokenId: BN;
      bidPrice: BN;
      bidder: string;
      expireTimestamp: BN;
    }>;

    /**
     * get all highest bids
     */
    getAllTokenHighestBids(
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      { tokenId: BN; bidPrice: BN; bidder: string; expireTimestamp: BN }[]
    >;

    /**
     * List token for sale
     * @param expireTimestamp when would this listing expire
     * @param tokenId erc721 token Id
     * @param value min price to sell the token
     */
    listToken: {
      (
        tokenId: number | BN | string,
        value: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenId: number | BN | string,
        value: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenId: number | BN | string,
        value: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenId: number | BN | string,
        value: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Delist token for sale
     * @param tokenId erc721 token Id
     */
    delistToken: {
      (
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Buy token
     * @param tokenId erc721 token Id
     */
    buyToken: {
      (
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Enter bid for token
     * @param bidPrice price in payment token
     * @param expireTimestamp when would this bid expire
     * @param tokenId erc721 token Id
     */
    enterBidForToken: {
      (
        tokenId: number | BN | string,
        bidPrice: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenId: number | BN | string,
        bidPrice: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenId: number | BN | string,
        bidPrice: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenId: number | BN | string,
        bidPrice: number | BN | string,
        expireTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Withdraw bid for token
     * @param tokenId erc721 token Id
     */
    withdrawBidForToken: {
      (
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Accept a bid of token from a bidder
     * @param bidder bidder address
     * @param tokenId erc721 token Id
     */
    acceptBidForToken: {
      (
        tokenId: number | BN | string,
        bidder: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenId: number | BN | string,
        bidder: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenId: number | BN | string,
        bidder: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenId: number | BN | string,
        bidder: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Count how many listing records are invalid now This is to help admin to decide to do a cleaning or not
     */
    getInvalidListingCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Count how many bids records are invalid now This is to help admin to decide to do a cleaning or not
     */
    getInvalidBidCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Clean all invalid listings
     */
    cleanAllInvalidListings: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Clean all invalid bids
     */
    cleanAllInvalidBids: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Show if listing and bid are enabled
     */
    isListingAndBidEnabled(
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Surface minimum listing and bid time range
     */
    actionTimeOutRangeMin(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Surface maximum listing and bid time range
     */
    actionTimeOutRangeMax(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Service fee
     */
    serviceFee(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
